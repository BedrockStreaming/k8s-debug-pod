#!/bin/bash

debugbox_dir=${HOME}/.k8s-debug-pod/box
pod_debugbox_dir=/tmp/box  # Use // to prevent MSYS path translation

usage() {
  error="$1"

  message=(
    "Debug pods based on minimal images."
    ""
    "Examples:"
    "  # Open debugging shell for the first container of the specified pod,"
    "  # install debugging tools into the container if they aren't installed yet."
    "  k8s-debug-pod pod hello-42-dmj88"
    ""
    "  # Open debugging shell for container 'proxy' of the specified pod,"
    "  # install debugging tools into the container if they aren't installed yet."
    "  k8s-debug-pod pod hello-42-dmj88 -c proxy"
    ""
    "  # Install debugging tools into specified pod."
    "  k8s-debug-pod pod hello-42-dmj88 --add"
    ""
    "  # Uninstall debugging tools from specified pod."
    "  k8s-debug-pod pod hello-42-dmj88 --remove"
    ""
    "  # Open debugging shell for the first container of the first pod of the specified controller,"
    "  # install debugging tools into all containers of the controller if they aren't installed yet."
    "  # Requires a redeployment."
    "  k8s-debug-pod deployment hello"
    ""
    "  # Open debugging shell for the first container of the first pod of the specified controller,"
    "  # install debugging tools into all containers of the controller if they aren't installed yet."
    "  # Uses the specified Docker image for tool installation instead of the default one."
    "  # Requires a redeployment."
    "  k8s-debug-pod deployment hello -i example.org/tools/k8s-debug-pod"
    ""
    "  # Uninstall debugging tools from specified controller."
    "  # Requires a redeployment."
    "  k8s-debug-pod deployment hello --remove"
    ""
    "Options:"
    "  -n, --namespace='': Namespace which contains the pod to debug, defaults to the namespace of the current kubectl context"
    "  -c, --container='': Container name to open shell for, defaults to first container in pod"
    "  -i, --image='puzzle/k8s-debug-pod': Docker image for installation of debugging via controller. Must be built from 'puzzle/k8s-debug-pod' repository."
    "  -h, --help: Show this help message"
    "      --add: Install debugging tools into specified resource"
    "      --remove: Remove debugging tools from specified resource"
    ""
    "Usage:"
    "  $(basename $0) TYPE NAME [options]"

  )
  printf '%s\n' "${message[@]}"

  if [ "$error" ]; then
    echo
    echo "$error" >&2
    exit 1
  else
    exit 0
  fi
}

init() {
  if command -v oc >/dev/null 2>&1; then
    kubectl=oc
  elif command -v kubectl >/dev/null 2>&1; then
    kubectl=kubectl
  else
    echo "$0: Either the Kubernetes client 'kubectl' or the OpenShift client 'oc' is required!" >&2
    exit 1
  fi
}

parse_cmdline() {
  local args=()
  add_opt=false
  remove_opt=false
  container_opt=""
  image_opt="m6web/k8s-debug-pod"
  namespace_opt=""
  while [ $# -gt 0 ]; do
    case "$1" in
      -h|--help)
        usage
        ;;
      --add)
        add_opt=true
        ;;
      --remove)
        remove_opt=true
        ;;
      -c|--container)
        shift
        container_name="${1}"
        container_opt="--container=${container_name}"
        ;;
      --container=*)
        container_name="${1#*=}"
        container_opt="--container=${container_name}"
        ;;
      -i|--image)
        shift
        image_opt="${1}"
        ;;
      --image=*)
        image_opt="${1#*=}"
        ;;
      -n|--namespace)
        shift
        namespace_opt="--namespace=${1}"
        ;;
      --namespace=*)
        namespace_opt="--namespace=${1#*=}"
        ;;
      -*)
        usage "Unknown option $1"
        ;;
      *)
        args+=("$1")
      esac
      shift
  done

  if [ ${#args[@]} -ne 2 ]; then
    usage "Invalid number of arguments!"
  fi

  type_arg="${args[0]}"
  name_arg="${args[1]}"
}

install_into_pod() {
  if ! ${kubectl} exec ${namespace_opt} ${container_opt} "${name_arg}" ${pod_debugbox_dir}/bin/true >/dev/null 2>&1; then
    
    container_id=$(${kubectl} get ${namespace_opt} "${type_arg}" "${name_arg}" -o jsonpath="{.status.containerStatuses[?(@.name==\"${container_name}\")].containerID}")
    runtime=${container_id%://*}
    container_id=${container_id#*://}
    node=$(${kubectl} get ${namespace_opt} "${type_arg}" "${name_arg}" -o jsonpath='{.spec.nodeName}')

    if [[ ${runtime} != docker ]]; then
      echo >&2 "Error: $0 only works with a docker runtime. Found: ${container_id}"
      exit 1
    fi

    DOCKER_DOWNLOAD_URL="${DOCKER_DOWNLOAD_URL:-https://download.docker.com/linux/static/stable/x86_64/docker-17.12.0-ce.tgz}"
    docker="/docker-cli/docker/docker -H unix:///mnt/docker.sock"

    # Command for installing busybox image from the debugger container into the target container.
    copy_cmd="set -x; mkdir /docker-cli;" # Print commands, for debugging.
    # Download docker client
    copy_cmd="${copy_cmd} wget -qO/docker-cli/docker.tgz ${DOCKER_DOWNLOAD_URL}"
    # Extract docker client
    copy_cmd="${copy_cmd} && tar zxvf /docker-cli/docker.tgz -C /docker-cli"
    # Copy the directory structure into the target container.
    #copy_cmd="${copy_cmd} && ${docker} cp /usr/local/k8s-debug-pod ${container_id}:/${pod_debugbox_dir}"
    copy_cmd="${copy_cmd} && tar -C /usr/local/k8s-debug-pod -f- -c box | ${docker} exec -i ${container_id} tar -C $(dirname ${pod_debugbox_dir}) -xf-"

    manifest=(
      "---"
      "apiVersion: v1"
      "kind: Pod"
      "metadata:"
      "  generateName: k8s-debug-pod-"
      "spec:"
      "  nodeName:    ${node}"
      "  restartPolicy: Never"
      "  containers:"
      "    - name: k8s-debug-pod"
      "      image: ${image_opt}"
      "      imagePullPolicy: Always"
      "      securityContext:"
      "        privileged: true"
      "      command:"
      "        - sh"
      "        - -c"
      "        - \"${copy_cmd}\""
      "      # Mount the node FS for direct access to docker."
      "      volumeMounts:"
      "        - name: docker-sock"
      "          mountPath: /mnt/docker.sock"
      "          readOnly: true"
      "  volumes:"
      "    - name: docker-sock"
      "      hostPath:"
      "        path: /var/run/docker.sock"
    )
    manifest="$(printf '%s\n' "${manifest[@]}")" # convert manifest to string

    injecter_name=$(${kubectl} create -o name -f - <<<"${manifest}")
    injecter_name=${injecter_name#pod/} # Remove pod/ prefix from name

    # Cleanup the debugger pod.
    function cleanup() {
      if ${kubectl} get pod ${injecter_name} &>/dev/null; then
        ${kubectl} delete pod ${injecter_name}
      fi
    }
    trap cleanup EXIT

    # Wait for the pod to terminate.
    phase=$(${kubectl} get ${namespace_opt} pod ${injecter_name} -o jsonpath='{.status.phase}')
    while [[ ! ${phase} =~ (Succeeded|Failed) ]]; do
      echo "waiting for debugger pod to complete (currently ${phase})..."
      sleep 1
      phase=$(${kubectl} get ${namespace_opt} pod ${injecter_name} -o jsonpath='{.status.phase}')
    done
    if [[ ${phase} == "Failed" ]]; then
      echo 2> "Pod failed:"
      ${kubectl} logs ${injecter_name}
    fi

    cleanup

    if [[ ${phase} == "Failed" ]]; then
      echo >&2
      echo "Couldn't inject debugging tools!" >&2
      echo "Instead you can patch the controller (deployment, deploymentconfig, daemonset, ...) to use an init container with debugging tools, this requires a new deployment though!" >&2
      exit 1
    fi

    ${kubectl} exec ${namespace_opt} ${container_opt} "${name_arg}" ${pod_debugbox_dir}/install-k8s-debug-pod.sh || exit 1
  fi

  if [ "${add_opt}" != true ]; then
    ${kubectl} exec ${namespace_opt} ${container_opt} -it "${name_arg}" ${pod_debugbox_dir}/sh
  fi
}

remove_from_pod() {
  if ${kubectl} exec ${namespace_opt} "${name_arg}" -- ${pod_debugbox_dir}/bin/test -e ${pod_debugbox_dir}/uninstall-k8s-debug-pod.sh >/dev/null 2>&1; then
    echo "Removing debugging tools from ${type_arg} ${name_arg}"
    ${kubectl} exec ${namespace_opt} ${container_opt} "${name_arg}" ${pod_debugbox_dir}/uninstall-k8s-debug-pod.sh || exit 1
  else
    echo "No debugging tools are installed in ${type_arg} '${name_arg}' with 'kubectl cp' mechanism!"
  fi
}

install_into_controller() {
  echo "Installing debugging tools into ${type_arg} ${name_arg}"
  containers=$(${kubectl} get ${namespace_opt} "${type_arg}" "${name_arg}" -o jsonpath='{.spec.template.spec.containers[*].name}')

  annotations=($(${kubectl} get ${namespace_opt} "${type_arg}" "${name_arg}" -o go-template='{{range $key, $value := .spec.template.metadata.annotations}}{{$key}}{{"\n"}}{{end}}'))
  if [[ " ${annotations[*]} " =~ pod.alpha.kubernetes.io/init-containers ]]; then
    alpha_init_containers_annotation=true
  fi
  if [[ " ${annotations[*]} " =~ pod.beta.kubernetes.io/init-containers ]]; then
    beta_init_containers_annotation=true
  fi

  patch=(
    "spec:"
    "  template:"
  )

  if [ "${alpha_init_containers_annotation}" = true ] || [ "${beta_init_containers_annotation}" = true ]; then
    patch+=(
      "    metadata:"
      "      annotations: "
    )
    if [ "${alpha_init_containers_annotation}" = true ]; then
      patch+=(
        "        pod.alpha.kubernetes.io/init-containers: null"
      )
    fi
    if [ "${beta_init_containers_annotation}" = true ]; then
      patch+=(
        "        pod.beta.kubernetes.io/init-containers: null"
      )
    fi
  fi

  patch+=(
    "    spec:"
    "      volumes:"
    "      - name: k8s-debug-pod"
    "        emptyDir: {}"
    "      initContainers:"
    "      - name: k8s-debug-pod"
    "        image: ${image_opt}"
    "        imagePullPolicy: Always"
    "        volumeMounts:"
    "        - name: k8s-debug-pod"
    "          mountPath: ${pod_debugbox_dir}"
    "      containers:"
  )

  for container in ${containers}; do
    patch+=(
      "      - name: ${container}"
      "        volumeMounts:"
      "        - name: k8s-debug-pod"
      "          mountPath: ${pod_debugbox_dir}"
    )
  done

  patch="$(printf '%s\n' "${patch[@]}")"  # convert patch to string
  ${kubectl} patch ${namespace_opt} --patch="${patch}" "${type_arg}" "${name_arg}"
  ${kubectl} rollout status ${namespace_opt} "${type_arg}" "${name_arg}"

  if [ "${add_opt}" != true ]; then
    selector=$(${kubectl} get ${namespace_opt} "${type_arg}" "${name_arg}" -o go-template='{{range $key, $value := (or .spec.selector.matchLabels .spec.selector)}}{{$key}}={{$value}},{{end}}')
    selector="${selector%,}"  # remove trailing comma
    pods=($(${kubectl} get pod ${namespace_opt} -l "${selector}" -o go-template='{{range .items}}{{if not .metadata.deletionTimestamp}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}'))
    ${kubectl} exec ${namespace_opt} ${container_opt} -it ${pods[0]} ${pod_debugbox_dir}/sh
  fi
}

remove_from_controller() {
  installed=$(${kubectl} get ${namespace_opt} ${type_arg} ${name_arg} -o jsonpath='{.spec.template.spec.volumes[?(@.name=="k8s-debug-pod")].name}')
  if [ ! "${installed}" ]; then
    echo "No debugging tools installed in ${type_arg} ${name_arg}"
    exit 0
  fi

  echo "Removing debugging tools from ${type_arg} ${name_arg}"
  containers=$(${kubectl} get ${namespace_opt} ${type_arg} ${name_arg} -o jsonpath='{.spec.template.spec.containers[*].name}')

  patch=(
    "spec:"
    "  template:"
    "    metadata:"
    "      annotations:"
    "        pod.alpha.kubernetes.io/init-containers: null"
    "        pod.beta.kubernetes.io/init-containers: null"
    "    spec:"
    "      volumes:"
    "      - \$patch: delete"
    "        name: k8s-debug-pod"
    "      initContainers:"
    "      - \$patch: delete"
    "        name: k8s-debug-pod"
    "      containers:"
  )

  for container in ${containers}; do
    patch+=(
      "      - name: ${container}"
      "        volumeMounts:"
      "        - \$patch: delete"
      "          mountPath: ${pod_debugbox_dir}"
    )
  done


  patch="$(printf '%s\n' "${patch[@]}")"  # convert patch to string
  ${kubectl} patch ${namespace_opt} --patch="${patch}" ${type_arg} ${name_arg} || exit 1 #&& \
  ${kubectl} rollout status ${namespace_opt} "${type_arg}" "${name_arg}" || exit 1
}

init
parse_cmdline "$@"

if [ "${type_arg}" = "pod" ]; then
  if [ "${remove_opt}" != true ]; then
    install_into_pod
  else
    remove_from_pod
  fi
else
  if [ "${remove_opt}" != true ]; then
    install_into_controller
  else
    remove_from_controller
  fi
fi
